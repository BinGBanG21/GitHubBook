/*
  链表（LinkedList）：和数组一样 可以用于储存一系列的元素 但是实现机制和优缺点完全不同
  数组（Array）：要储存多个元素 数组是最常用的数据结构 每一种编程语言都默认实现了数组
  数组的缺点：
    （1）数组的创建通常需要申请一段连续的内存空间（一整块空间） 并且大小是固定的 当前
        数组不能满足容量要求时需要扩容（一般都是申请一个更大的数组（2倍） 然后将原数组中的元素复制过去）
    （2）在数组中插入元素 其实所需的成本很高 需要进行大量的元素位移
    （3）虽然JavaScript中Array类帮我们做了这样的事 但是背后的原理是一样的
  相比来说链表的优点：
    （1）链表中的元素在内存中不必是独立的空间 可以充分利用内存 实现内存的动态管理
    （2）链表中的元素由一个储存元素本身的节点和指向下一个元素的引用组成
    （3）链表不必再创建时就确定大小 可以无限延伸下去
    （4）在插入和删除数据时 时间复杂度可以变成O（1）效率高很多
  数组查询和修改元素 性能更高   链表插入和删除元素 性能更高（访问任意一个元素 都要从头开始访问）
  链表类似于火车 乘客相当于元素的数据data 连接点相当于指针

*/

//LinkedList的实现
//LinkedList内部元素
function LinkedNode(data) {
  this.data = data
  this.next = null
}
function LinkedList(params) {
  this.head = null
  //记录链表的长度
  this.length = 0
}
//向链表末尾添加一个新的项
//向链表特定位置添加一个新的项
//获取对应位置的元素
//返回元素在该链表中的索引 如果没有该元素返回-1
//修改某个位置的元素
//从链表的特定位置移除一项
//从链表中移除一项
//判断链表是否为空
//返回链表中元素的个数
//把链表中的元素按字符串的形式返回
